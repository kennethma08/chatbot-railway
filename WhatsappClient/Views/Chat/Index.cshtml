@{
    ViewData["Title"] = "Live Agent WhatsApp";
}

@section Styles {
    <style>
        html, body {
            height: 100%;
            overflow: hidden;
        }

        :root {
            --violet-900: #310353;
            --violet-700: #7C3BB8;
            --violet-600: #A860E0;
            --violet-500: #B57EDC;
            --violet-300: #CDABE6;
            --list-odd: #F6EFFF;
            --list-even: #FFFFFF;
            --list-hover: #EDE2F6;
            --list-active: #EADCF4;
            --closed-bg: #F0ECF7;
            --closed-bg-hov: #E9E3F4;
            --closed-border: #CBB6E9;
            --closed-border2: #BFA6E6;
            --closed-muted: #7b6f8d;
        }

        #messages.chat-messages {
            background-repeat: repeat;
            background-position: center;
            background-size: 380px auto;
        }

        .input-group {
            gap: .5rem;
        }

        #message-input {
            border-radius: 999px !important;
        }

        #send-btn.btn.btn-primary {
            border-radius: 999px !important;
            padding-inline: 18px;
            background-color: var(--violet-600) !important;
            border-color: var(--violet-600) !important;
            color: #fff !important;
        }

            #send-btn.btn.btn-primary:hover,
            #send-btn.btn.btn-primary:focus {
                background-color: var(--violet-500) !important;
                border-color: var(--violet-500) !important;
                box-shadow: 0 0 0 .2rem rgba(168,96,224,.2) !important;
            }

            #send-btn.btn.btn-primary:disabled,
            #send-btn.btn.btn-primary[disabled] {
                background-color: #EADCF4 !important;
                border-color: #EADCF4 !important;
                color: #6b5a84 !important;
                opacity: 1 !important;
                cursor: not-allowed;
            }

        #statusFilter, #statusFilterMob {
            border-radius: 999px !important;
            padding-left: .9rem;
            padding-right: 2.25rem;
            border-color: var(--violet-300);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 16 16'%3e%3cpath fill='%236932B0' d='M3.2 5.5a1 1 0 0 1 1.6 0L8 9.1l3.2-3.6a1 1 0 1 1 1.6 1.2L8.8 11a1 1 0 0 1-1.6 0L3.2 6.7a1 1 0 0 1 0-1.2z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right .9rem center;
            background-size: 12px;
        }

            #statusFilter:focus, #statusFilterMob:focus {
                border-color: var(--violet-600);
                box-shadow: 0 0 0 .2rem rgba(168,96,224,.2);
                outline: 0;
            }

        #toggleStatusBtn {
            border-radius: 999px !important;
        }

        #searchBox, #searchBoxMob {
            border-radius: 999px !important;
            padding-right: 2.25rem;
        }

        #users, #users-mob {
            padding: 6px 6px 8px;
        }

            #users .list-group-item, #users-mob .list-group-item {
                border-radius: 12px !important;
                margin: 6px 6px;
                padding: 10px 12px 10px 14px;
                border: 1px solid transparent;
                transition: background-color .15s,box-shadow .15s,border-color .15s;
            }

                #users .list-group-item:nth-child(odd), #users-mob .list-group-item:nth-child(odd) {
                    background-color: var(--list-odd);
                }

                #users .list-group-item:nth-child(even), #users-mob .list-group-item:nth-child(even) {
                    background-color: var(--list-even);
                }

                #users .list-group-item:hover, #users-mob .list-group-item:hover {
                    background-color: var(--list-hover);
                }

                #users .list-group-item.active, #users-mob .list-group-item.active {
                    background-color: var(--list-active) !important;
                    border-left: 6px solid var(--violet-600);
                    border-color: rgba(168,96,224,.35);
                    box-shadow: 0 2px 6px rgba(49,3,83,.08);
                    border-radius: 12px !important;
                }

                    #users .list-group-item:focus, #users .list-group-item.active:focus,
                    #users-mob .list-group-item:focus, #users-mob .list-group-item.active:focus {
                        outline: none;
                        box-shadow: 0 0 0 .18rem rgba(168,96,224,.15);
                    }

                #users .list-group-item.closed, #users-mob .list-group-item.closed {
                    background-color: var(--closed-bg);
                    border-left: 6px solid var(--closed-border);
                    border-color: rgba(168,96,224,.15);
                    color: #4b3e5f;
                }

                    #users .list-group-item.closed .text-muted, #users-mob .list-group-item.closed .text-muted {
                        color: var(--closed-muted) !important;
                    }

                    #users .list-group-item.closed:hover, #users-mob .list-group-item.closed:hover {
                        background-color: var(--closed-bg-hov);
                    }

                    #users .list-group-item.closed.active, #users-mob .list-group-item.closed.active {
                        background-color: var(--closed-bg-hov) !important;
                        border-left-color: var(--closed-border2);
                    }

        .chat-messages {
            position: relative;
        }

            .chat-messages::before {
                content: "";
                position: absolute;
                inset: 0;
                background-repeat: repeat;
                background-position: center;
                background-size: 380px auto;
                opacity: .18;
                pointer-events: none;
                z-index: 0;
            }

            .chat-messages > * {
                position: relative;
                z-index: 1;
            }

        .msg {
            display: flex;
            margin-bottom: 12px;
            max-width: 100%;
            align-items: flex-end;
        }

            .msg .bubble {
                padding: 10px 12px;
                border-radius: 14px;
                display: inline-block;
                max-width: 72%;
                word-wrap: break-word;
                white-space: pre-wrap;
            }

            .msg.contact {
                justify-content: flex-start;
            }

                .msg.contact .bubble {
                    background: #f1f0f0;
                    color: #111;
                    border-bottom-left-radius: 4px;
                }

            .msg.me {
                justify-content: flex-end;
            }

                .msg.me .bubble {
                    background: var(--violet-600);
                    color: #fff;
                    border-bottom-right-radius: 4px;
                }

        .time {
            font-size: .68rem;
            color: #fff !important;
            margin-left: 8px;
        }

        .time-dark {
            font-size: .68rem;
            color: black !important;
            margin-left: 8px;
        }

        .badge-open {
            background: #0f5132;
        }

        .badge-closed {
            background: #8d1538;
        }

        .conv-pill {
            background-color: #f1f3f5;
            color: #343a40;
            border: 1px solid #dee2e6;
            font-weight: 700;
            border-radius: .65rem;
            padding: .2rem .5rem;
            font-size: .75rem;
        }

        .name-pill {
            max-width: 280px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .min-w-0 {
            min-width: 0;
        }

        .text-truncate-1 {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        #chat-header .btn-offcanvas {
            padding: .375rem .6rem;
            border-radius: .75rem;
        }

        #chat-header .badge {
            white-space: nowrap;
        }

        .offcanvas.custom-chat {
            top: 80px;
            height: calc(100dvh - 80px);
        }

            .offcanvas.custom-chat .offcanvas-body {
                padding: 0;
                display: flex;
                flex-direction: column;
            }

        #users-mob {
            height: 100%;
            overflow: auto;
        }

        @@media (max-width:991.98px) {
            .offcanvas.custom-chat {
                top: 0 !important;
                height: 100dvh !important;
            }
        }

        .icon-btn {
            border: 0;
            background: transparent;
            padding: 4px 6px;
            border-radius: 8px;
            line-height: 1;
        }

            .icon-btn:hover {
                background: rgba(0,0,0,.06);
            }

        .btn-save {
            background: var(--violet-600);
            border-color: var(--violet-600);
            color: #fff;
            border-radius: 12px;
        }

            .btn-save:hover {
                background: var(--violet-500);
                border-color: var(--violet-500);
            }

            .btn-save:disabled {
                opacity: .7;
            }

        #chat-contact-name[contenteditable="true"] {
            outline: 2px dashed #e3e3f5;
            border-radius: 6px;
            padding: 2px 4px;
        }
    </style>
}

<div class="container-fluid p-0 vh-100 d-flex flex-column">
    <div class="card rounded-0 border-0 flex-grow-1 d-flex overflow-hidden">
        <div class="row g-0 flex-grow-1 h-100 overflow-hidden">

            <div class="col-12 col-lg-4 col-xl-3 border-end d-none d-lg-flex flex-column h-100 overflow-hidden">
                <div class="p-3">
                    <div class="row g-2">
                        <div class="col-8">
                            <input id="searchBox" type="text" class="form-control" placeholder="Filtrar conversaciones..." />
                        </div>
                        <div class="col-4">
                            <select id="statusFilter" class="form-select">
                                <option value="all" selected>All</option>
                                <option value="open">Open</option>
                                <option value="closed">Closed</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div id="users" class="list-group list-group-flush flex-grow-1 overflow-auto"></div>
            </div>

            <div class="col-12 col-lg-8 col-xl-9 d-flex flex-column overflow-hidden" style="min-height:0;height:calc(100vh - 80px);height:calc(100dvh - 80px);">
                <div class="py-2 px-3 border-bottom" id="chat-header">
                    <div class="d-flex align-items-center flex-wrap gap-2">
                        <button class="btn btn-outline-secondary btn-sm d-lg-none btn-offcanvas order-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#convOffcanvas" aria-controls="convOffcanvas">
                            <i class="bi bi-chat-left-text d-inline d-sm-none"></i><span class="d-none d-sm-inline">Conversaciones</span>
                        </button>

                        <img id="chat-avatar" src="https://static.vecteezy.com/system/resources/previews/002/318/271/original/user-profile-icon-free-vector.jpg" class="rounded-circle order-1" width="36" height="36" alt="avatar" />

                        <div class="flex-grow-1 min-w-0 order-2">
                            <div class="d-flex align-items-center flex-wrap gap-2">
                                <span id="chat-contact-name" class="fw-bold text-truncate-1">Selecciona una conversación</span>
                                <button type="button" id="chat-btnEditName" class="icon-btn" aria-label="Editar nombre"><i class="bx bx-pencil"></i></button>
                                <button type="button" id="chat-btnSaveName" class="btn btn-save btn-sm" style="display:none;">Guardar</button>

                                <span id="statusBadge" class="badge"></span>
                                <span id="convNumber" class="badge conv-pill" style="display:none;"></span>
                            </div>
                            <div id="chat-contact-sub" class="small text-muted d-none d-sm-block"></div>
                        </div>

                        <button class="btn btn-sm btn-outline-secondary ms-auto order-3" id="toggleStatusBtn" disabled>Cerrar</button>
                    </div>
                </div>

                <div class="chat-messages flex-grow-1 overflow-auto p-3" id="messages"></div>

                <div class="border-top p-3 flex-shrink-0">
                    <div class="input-group">
                        <input type="text" id="message-input" class="form-control" placeholder="Escribe un mensaje..." />
                        <button class="btn btn-primary" id="send-btn" type="button">Enviar</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<form id="chat-antiforgery" class="d-none">@Html.AntiForgeryToken()</form>

<div class="offcanvas offcanvas-start custom-chat" tabindex="-1" id="convOffcanvas" aria-labelledby="convOffcanvasLabel" data-bs-backdrop="true">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="convOffcanvasLabel">Conversaciones</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Cerrar"></button>
    </div>
    <div class="offcanvas-body">
        <div class="p-3 border-bottom">
            <div class="row g-2">
                <div class="col-8"><input id="searchBoxMob" type="text" class="form-control" placeholder="Filtrar conversaciones..." /></div>
                <div class="col-4">
                    <select id="statusFilterMob" class="form-select">
                        <option value="all" selected>All</option>
                        <option value="open">Open</option>
                        <option value="closed">Closed</option>
                    </select>
                </div>
            </div>
        </div>
        <div id="users-mob" class="list-group list-group-flush"></div>
    </div>
</div>

@section Scripts {
<script>
/* ===== CONFIG BÁSICA ===== */
const usersEl    = document.getElementById('users');
const usersMobEl = document.getElementById('users-mob');
const messagesEl = document.getElementById('messages');

const searchBox       = document.getElementById('searchBox');
const statusFilter    = document.getElementById('statusFilter');
const searchBoxMob    = document.getElementById('searchBoxMob');
const statusFilterMob = document.getElementById('statusFilterMob');

const chatNameEl  = document.getElementById('chat-contact-name');
const badgeEl     = document.getElementById('statusBadge');
const toggleBtn   = document.getElementById('toggleStatusBtn');
const sendBtn     = document.getElementById('send-btn');
const inputEl     = document.getElementById('message-input');

let conversations = [];
let selectedConversation = null;
let messages = [];

/* ===== PREFERENCIA: NO auto-seguir la última ===== */
const LS_SELECTED_ID = 'livechat:selectedConvId';

/* ===== UTILS ===== */
const CR_TZ = 'America/Costa_Rica';
function asDateUTC(ts){ if(ts==null) return new Date(NaN); if(typeof ts==='number') return new Date(ts); const s=String(ts); if(/Z|[+-]\d{2}:\d{2}$/.test(s)) return new Date(s); return new Date(s+'Z'); }
const fmtDateTimeCR=new Intl.DateTimeFormat('es-CR',{timeZone:CR_TZ,dateStyle:'short',timeStyle:'short'});
const fmtTimeCR=new Intl.DateTimeFormat('es-CR',{timeZone:CR_TZ,hour:'2-digit',minute:'2-digit'});
const fmt=(ts)=>{const d=asDateUTC(ts);return isNaN(d)?'':fmtDateTimeCR.format(d);};
const fmtTime=(ts)=>{const d=asDateUTC(ts);return isNaN(d)?'':fmtTimeCR.format(d);};
const esc=(s)=>String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
function normalizeSender(s){ const v=(s||'contact').toLowerCase(); return (v==='agent'||v==='user'||v==='me'||v==='admin')?'me':'contact'; }
function quickHash(str){ let h=0; for(let i=0;i<str.length;i++) h=(h*31+str.charCodeAt(i))|0; return String(h); }
function stable(x){ try{ return JSON.stringify(x, Object.keys(x).sort()); }catch{ return JSON.stringify(x);} }
function nearBottom(el, tol=80){ return (el.scrollHeight - el.scrollTop - el.clientHeight) < tol; }

/* ===== RENDER LISTA ===== */
function getDisplayNameForConv(c){ return (c.contactName||c.contactPhone||(`Contacto ${c.contactId||c.id||''}`)).trim(); }
function conversationsHTML(arr){
  return arr.map(c=>{
    const isClosed = (String(c.status||'open').toLowerCase()!=='open');
    return `
      <a href="#" class="list-group-item list-group-item-action d-flex align-items-start${isClosed?' closed':''}" data-conv-id="${c.id}">
        <img src="https://static.vecteezy.com/system/resources/previews/002/318/271/original/user-profile-icon-free-vector.jpg" class="rounded-circle me-2" width="40" height="40" alt="">
        <div class="flex-grow-1 min-w-0">
          <div class="fw-bold text-truncate-1">${esc(getDisplayNameForConv(c))} - ${esc(String(c.status ?? ''))}</div>
          <div class="small text-muted">${esc(c.lastActivityAt?fmt(c.lastActivityAt):(c.startedAt?fmt(c.startedAt):''))}</div>
          <div class="small">${esc(c.contactPhone||'')}</div>
        </div>
      </a>`;
  }).join('');
}
function renderConversations(list){
  const st = (statusFilter?.value||'all');
  const q  = (searchBox?.value||'').toLowerCase().trim();
  const src = (list||[]).filter(c=>{
    const name = getDisplayNameForConv(c).toLowerCase();
    const okStatus = (st==='all') || ((c.status||'open').toLowerCase()===st);
    const okText = String(c.id).includes(q) || name.includes(q) || (c.contactPhone||'').toLowerCase().includes(q);
    return okStatus && okText;
  });
  const html = src.length? conversationsHTML(src) : '<div class="p-3 text-muted">No hay conversaciones.</div>';
  if(usersEl) usersEl.innerHTML = html;
  if(usersMobEl) usersMobEl.innerHTML = html;
  highlightActive();
}
function highlightActive(){
  const id = selectedConversation?.id;
  usersEl?.querySelectorAll('.list-group-item').forEach(a=>a.classList.toggle('active', a.dataset.convId==id));
  usersMobEl?.querySelectorAll('.list-group-item').forEach(a=>a.classList.toggle('active', a.dataset.convId==id));
}

/* ===== CONVERSACIÓN ===== */
function applyStatusUI(status){
  const s=(status||'open').toLowerCase();
  badgeEl.textContent=s.toUpperCase();
  badgeEl.className='badge '+(s==='open'?'badge-open':'badge-closed');
  const closed = s!=='open';
  inputEl.disabled=closed; sendBtn.disabled=closed;
  inputEl.placeholder=closed?'Conversación cerrada':'Escribe un mensaje...';
  toggleBtn.disabled=!selectedConversation || closed;
  toggleBtn.textContent = closed?'Cerrada':'Cerrar';
}
function selectConversation(conv){
  if(!conv) return;
  selectedConversation = conv;
  localStorage.setItem(LS_SELECTED_ID, String(conv.id));
  chatNameEl.textContent = getDisplayNameForConv(conv);
  document.getElementById('chat-contact-sub').textContent = `Conversación #${conv.id}`;
  applyStatusUI(conv.status);
  renderConversations(conversations);
  loadMessages(conv.id);
  restartMessagePolling(); // <— empieza/renueva polling de mensajes para ESTA conversación
}
function ensureSelectedRef(){
  if(!selectedConversation) return;
  const updated = conversations.find(c=>String(c.id)===String(selectedConversation.id));
  if(updated) selectedConversation = updated;
  highlightActive();
}

/* ===== MENSAJES ===== */
function renderMessages(){
  const stick = nearBottom(messagesEl);
  messagesEl.innerHTML='';
  if(!messages.length){ messagesEl.innerHTML='<div class="text-muted">Sin mensajes aún.</div>'; return; }
  messages.forEach(m=>{
    const who=normalizeSender(m.sender);
    const wrap=document.createElement('div'); wrap.className='msg '+(who==='me'?'me':'contact');
    const bubble=document.createElement('div'); bubble.className='bubble';
    if(m.type && m.type!=='text'){ bubble.innerHTML=`<strong>[${esc(m.type)}]</strong> ${esc(m.message||'')}`; }
    else{ bubble.textContent = m.message || ''; }
    const t=document.createElement('span'); t.className=(who==='me'?'time':'time-dark'); t.textContent=fmtTime(m.sentAt);
    if(who==='me'){ bubble.appendChild(t); wrap.appendChild(bubble); } else { wrap.appendChild(bubble); bubble.appendChild(t); }
    messagesEl.appendChild(wrap);
  });
  if(stick) messagesEl.scrollTop = messagesEl.scrollHeight;
}
async function loadMessages(conversationId){
  try{
    const data = await fetch(`/Chat/GetConversationMessages?conversationId=${conversationId}&_=${Date.now()}`, {
      headers:{'X-Requested-With':'XMLHttpRequest'},
      cache:'no-store'
    }).then(r=>r.json());
    messages = data?.messages || [];
    // actualiza el hash inicial para el poll
    lastMsgHashByConv[conversationId] = computeMsgHash(messages);
    renderMessages();
  }catch(e){ console.error(e); }
}

/* ===== ENVÍO ===== */
async function sendMessage(){
  const txt=(inputEl.value||'').trim();
  if(!txt || !selectedConversation) return;
  if((selectedConversation.status||'open').toLowerCase()!=='open') return;

  // pinta inmediato
  messages.push({ sender:'agent', message:txt, type:'text', sentAt:new Date().toISOString() });
  renderMessages(); inputEl.value='';

  try{
    const res = await fetch('/Chat/SendMessage',{
      method:'POST',
      headers:{'Content-Type':'application/json','X-Requested-With':'XMLHttpRequest'},
      cache:'no-store',
      body:JSON.stringify({
        conversationId:selectedConversation.id,
        contactId:selectedConversation.contactId||null,
        contactPhone:selectedConversation.contactPhone||null,
        message:txt
      })
    }).then(r=>r.json());
    if(!res?.success){
      alert(res?.error||'No se pudo enviar el mensaje.');
    }else{
      // refresco suave del hash para evitar re-render innecesario en el próximo poll
      lastMsgHashByConv[selectedConversation.id] = computeMsgHash(messages);
    }
  }catch(e){ console.error(e); alert('Error al enviar.'); }
}

/* ===== POLLING CONVERSACIONES (rápido, sin auto-cambio) ===== */
let convController = null;
let lastConvHash   = '';

let minDelayMs  = 800;
let pollDelayMs = 1200;
let maxDelayMs  = 8000;
let convTimer   = null;

function jitter(ms){ const d=ms*0.10; return Math.max(300, Math.floor(ms + (Math.random()*2-1)*d)); }
function scheduleNext(ms){ clearTimeout(convTimer); convTimer = setTimeout(pollConversations, jitter(ms)); }

function mergeConversations(list){
  const byId = Object.create(null);
  conversations.forEach(c=>byId[String(c.id)]=c);
  let hasNew=false;
  for(const n of list){
    const id=String(n.id);
    if(byId[id]) Object.assign(byId[id], n);
    else { hasNew=true; byId[id]=n; conversations.push(byId[id]); }
  }
  conversations.sort((a,b)=>{
    const ta=asDateUTC(a.lastActivityAt||a.startedAt).getTime()||0;
    const tb=asDateUTC(b.lastActivityAt||b.startedAt).getTime()||0;
    return tb-ta;
  });
  ensureSelectedRef();
  renderConversations(conversations);
  if(list.length && hasNew){ pollDelayMs = minDelayMs; } else { pollDelayMs = Math.min(maxDelayMs, Math.floor(pollDelayMs*1.15)); }
}
async function pollConversations(){
  if (document.hidden){ scheduleNext(Math.min(maxDelayMs, Math.max(pollDelayMs, 4000))); return; }
  try{
    convController?.abort();
    convController = new AbortController();

    const url = `/Chat/GetAllConversations?_=${Date.now()}`;
    const res = await fetch(url, {
      headers:{'X-Requested-With':'XMLHttpRequest','Cache-Control':'no-cache'},
      cache:'no-store',
      signal: convController.signal
    });
    const data = await res.json();
    const list = data?.conversations || [];

    const h = quickHash(stable(list.map(c=>({id:c.id, st:c.status, la:c.lastActivityAt, nm:c.contactName, ph:c.contactPhone}))));
    if(h !== lastConvHash){ lastConvHash = h; mergeConversations(list); }
    else { pollDelayMs = Math.min(maxDelayMs, Math.floor(pollDelayMs*1.15)); }
  }catch(err){
    pollDelayMs = Math.min(maxDelayMs, Math.floor(pollDelayMs*1.5));
    console.warn('pollConversations error:', err);
  }finally{
    scheduleNext(pollDelayMs);
  }
}

/* ===== POLLING MENSAJES (AJAX) ===== */
let msgController = null;
let msgTimer = null;
let msgPollMsMin = 900;
let msgPollMs    = 1400;
let msgPollMsMax = 7000;
const lastMsgHashByConv = Object.create(null);

function computeMsgHash(list){
  return quickHash(stable((list||[]).map(m=>({i:m.id,s:m.sender,t:m.type,at:m.sentAt,tx:m.message}))));
}
function scheduleMsgNext(ms){
  clearTimeout(msgTimer);
  msgTimer = setTimeout(pollMessages, jitter(ms));
}
async function pollMessages(){
  const conv = selectedConversation;
  if(!conv){ scheduleMsgNext(2000); return; }
  if ((conv.status||'open').toLowerCase()!=='open'){ scheduleMsgNext(2500); return; }
  if (document.hidden){ scheduleMsgNext(3000); return; }

  try{
    msgController?.abort();
    msgController = new AbortController();

    const url = `/Chat/GetConversationMessages?conversationId=${conv.id}&_=${Date.now()}`;
    const res = await fetch(url, {
      headers:{'X-Requested-With':'XMLHttpRequest','Cache-Control':'no-cache'},
      cache:'no-store',
      signal: msgController.signal
    });
    const data = await res.json();
    const list = data?.messages || [];
    const newHash = computeMsgHash(list);
    const prevHash = lastMsgHashByConv[conv.id];

    if(newHash !== prevHash){
      lastMsgHashByConv[conv.id] = newHash;
      messages = list;
      renderMessages();
      msgPollMs = msgPollMsMin; // aceleramos tras cambio
    }else{
      msgPollMs = Math.min(msgPollMsMax, Math.floor(msgPollMs * 1.15));
    }
  }catch(err){
    msgPollMs = Math.min(msgPollMsMax, Math.floor(msgPollMs * 1.5));
    console.warn('pollMessages error:', err);
  }finally{
    scheduleMsgNext(msgPollMs);
  }
}
function stopMessagePolling(){ clearTimeout(msgTimer); msgTimer=null; msgController?.abort(); }
function restartMessagePolling(){ stopMessagePolling(); msgPollMs = msgPollMsMin; scheduleMsgNext(200); }

document.addEventListener('visibilitychange', ()=>{
  if(!document.hidden){
    pollDelayMs = minDelayMs; scheduleNext(150);
    msgPollMs = msgPollMsMin; scheduleMsgNext(150);
  }
});

/* ===== EVENTOS UI ===== */
function onListClick(e){
  const link = e.target.closest?.('.list-group-item[data-conv-id]');
  if(!link) return;
  e.preventDefault();
  const id = link.dataset.convId;
  const conv = conversations.find(c=>String(c.id)===String(id));
  if (conv) selectConversation(conv); // NO auto-salto, selección manual
}
usersEl?.addEventListener('click', onListClick);
usersMobEl?.addEventListener('click', onListClick);

statusFilter?.addEventListener('change', ()=>{ if (searchBoxMob) searchBoxMob.value = searchBox.value; if (statusFilterMob) statusFilterMob.value = statusFilter.value; renderConversations(conversations); });
searchBox?.addEventListener('input', ()=>{ if (searchBoxMob) searchBoxMob.value = searchBox.value; if (statusFilterMob) statusFilterMob.value = statusFilter.value; renderConversations(conversations); });
statusFilterMob?.addEventListener('change', ()=>{ if (searchBox) searchBox.value = searchBoxMob.value; if (statusFilter) statusFilter.value = statusFilterMob.value; renderConversations(conversations); });
searchBoxMob?.addEventListener('input', ()=>{ if (searchBox) searchBox.value = searchBoxMob.value; if (statusFilter) statusFilter.value = statusFilterMob.value; renderConversations(conversations); });

sendBtn?.addEventListener('click', sendMessage);
inputEl?.addEventListener('keydown', (e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); sendMessage(); }});
toggleBtn?.addEventListener('click', async ()=>{
  if(!selectedConversation) return;
  if((selectedConversation.status||'open').toLowerCase()!=='open') return;
  try{
    const res = await fetch('/Chat/UpdateConversationStatus',{
      method:'POST',
      headers:{'Content-Type':'application/json','X-Requested-With':'XMLHttpRequest'},
      cache:'no-store',
      body:JSON.stringify({conversationId:selectedConversation.id,status:'closed'})
    }).then(r=>r.json());
    if(res?.success){
      selectedConversation.status='closed';
      applyStatusUI('closed');
      renderConversations(conversations);
      stopMessagePolling();
    }else{
      alert(res?.error||'No se pudo cerrar.');
    }
  }catch(e){ console.error(e); alert('Error al cerrar.'); }
});

/* ===== ARRANQUE ===== */
(async function boot(){
  try{
    const data = await fetch(`/Chat/GetAllConversations?_=${Date.now()}`, {
      headers:{'X-Requested-With':'XMLHttpRequest'},
      cache:'no-store'
    }).then(r=>r.json());
    conversations = data?.conversations || [];
    conversations.sort((a,b)=>{
      const ta=asDateUTC(a.lastActivityAt||a.startedAt).getTime()||0;
      const tb=asDateUTC(b.lastActivityAt||b.startedAt).getTime()||0;
      return tb-ta;
    });
    renderConversations(conversations);

    // Restaurar selección o tomar la primera
    const savedId = localStorage.getItem(LS_SELECTED_ID);
    const savedConv = savedId ? conversations.find(c=>String(c.id)===savedId) : null;
    if(savedConv) selectConversation(savedConv);
    else if(conversations.length) selectConversation(conversations[0]);

    // Hash inicial
    lastConvHash = quickHash(stable(conversations.map(c=>({id:c.id, st:c.status, la:c.lastActivityAt, nm:c.contactName, ph:c.contactPhone}))));

    // Iniciar polling
    pollDelayMs = minDelayMs;
    scheduleNext(200);
    restartMessagePolling(); // <— activar polling de mensajes desde el arranque
  }catch(e){
    console.error(e);
    if(usersEl) usersEl.innerHTML='<div class="p-3 text-danger">Error cargando conversaciones</div>';
  }
})();

/* ===== RECOMENDACIÓN SERVIDOR =====
[ResponseCache(Location = ResponseCacheLocation.None, NoStore = true)]
Response.Headers.CacheControl = "no-cache, no-store";
Response.Headers["Pragma"] = "no-cache";
Response.Headers["Expires"] = "0";
=================================== */
</script>
}

}
